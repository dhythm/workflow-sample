// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  name            String?
  email           String     @unique
  issuesCreated   Issue[]    @relation("author")
  issuesAssigned  Issue[]    @relation("assignee")
  issuesReviewing Issue[]    @relation("reviewer")
  issuesApproving Issue[]    @relation("approver")
  comments        Comment[]
  approvals       Approval[]
}

model Issue {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  status     IssueStatus @default(created)
  title      String
  content    String
  authorId   String
  author     User        @relation("author", fields: [authorId], references: [id])
  assigneeId String?
  assignee   User?       @relation("assignee", fields: [assigneeId], references: [id])
  reviewers  User[]      @relation("reviewer")
  approvers  User[]      @relation("approver")
  approvals  Approval[]
  threads    Thread[]
}

model Approval {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  approved  Boolean
  issueId   String
  issue     Issue?   @relation(fields: [issueId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Thread {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  issue     Issue?    @relation(fields: [issueId], references: [id])
  issueId   String?
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  thread    Thread?  @relation(fields: [threadId], references: [id])
  threadId  String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

enum IssueStatus {
  created
  reviewing
  completed
  canceled
}
